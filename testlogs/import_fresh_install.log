SEVERE 4/5/19 3:13 PM:liquibase: Change Set import_fresh_install.xml::1::ftollena failed.  Error: Error executing SQL declare
  l_application_name varchar2(50) := 'CLAIMS';
  l_directory_name   varchar2(30) := 'OHI_DPDUMP_DIR';
  l_filename         varchar2(30) := lower(l_application_name||'_fresh_install');
  l_object_owner     varchar2(30) := upper('OHI_CLAIMS_OWNER');
  l_table_ts         varchar2(30);
  l_index_ts         varchar2(30) := upper('OHI_TAB');
  l_staging          boolean := (upper('false') = 'TRUE');

  l_handle           number;
  l_job_state        varchar2(100);
  l_status           ku$_status;
  l_error_table      ku$_logentry;
  l_error_index      pls_integer;
  l_action           varchar2(100);
  l_start_datetime   date;
  l_max_time_import  number := 30;

  procedure add_staging_filters
  ( p_handle in number
  ) is
    /*
     * Staging owners only contain plain tables, no indexes, constraints, etc
     */
  begin

    -- Don't include data
    dbms_datapump.data_filter
    ( handle => p_handle
    , name   => 'INCLUDE_ROWS'
    , value  => 0
    );
    dbms_datapump.metadata_filter
    ( handle      => p_handle
    , name        => 'EXCLUDE_PATH_EXPR'
    , value       => 'in (''STATISTICS'', ''TYPE'', ''DEFAULT_ROLE'', ''ROLE_GRANT'', ''SYSTEM_GRANT'''
                      ||', ''GRANT'', ''INDEX'', ''CONSTRAINT'', ''VIEW'', ''PACKAGE'', ''FUNCTION'''
                      ||', ''SEQUENCE'', ''SYNONYM'', ''TABLESPACE_QUOTA'', ''PROCACT_SCHEMA'', ''PROCOBJ'')'
    );
    dbms_datapump.metadata_filter
    ( handle      => p_handle
    , name        => 'NAME_EXPR'
    , value       => 'NOT IN (''DATABASECHANGELOG'', ''DATABASECHANGELOGLOCK'')'
    , object_type => 'TABLE'
    );
    dbms_datapump.metadata_filter
    ( handle      => p_handle
    , name        => 'NAME_EXPR'
    , value       => 'NOT LIKE ''OHI_TASK%'''
    , object_type => 'TABLE'
    );
    dbms_datapump.metadata_filter
    ( handle      => p_handle
    , name        => 'NAME_EXPR'
    , value       => 'NOT LIKE ''BATCH%'''
    , object_type => 'TABLE'
    );
    dbms_datapump.metadata_filter
    ( handle      => p_handle
    , name        => 'NAME_EXPR'
    , value       => 'NOT LIKE ''FIN_FIN_TRANS_SET_PERIODS'''
    , object_type => 'TABLE'
    );
    dbms_datapump.metadata_filter
    ( handle      => p_handle
    , name        => 'NAME_EXPR'
    , value       => 'NOT IN (''ACT$ACTIVITY_BUCKETS'', ''ACT$ACTIVITY_TYPE_VIEWS'', ''DAT$IMPORT_DATA'', ''FIN$CANCEL_WORK_AREA'''
                           ||', ''FIN$FINANCIAL_MESSAGE'', ''FIN$FIN_MESS_CHUNK'', ''FIN$SELECTED_FIN_TRANSACTION'', ''MEP$MEPE_DESELECT_CANDIDATES'''
                           ||', ''MEP$PRESELECTED_MEMBERPERIODS'', ''OHI$CFG_MIGR_MARSHALLED_ITEMS'', ''OHI$DATA_SET_PROCESS_FAILURES'''
                           ||', ''OHI$EXCLUDE_OPTIONS'', ''OHI$INSTALL_LOG'', ''OHI$SEARCH_RESULTS'', ''OHI$SEED_DATA_SETS'''
                           ||', ''OHI$SYSTEM_EVENT_LOGS'', ''OHI$UI_COMPONENT_CHANGES'')'
    , object_type => 'TABLE'
    );
    dbms_datapump.set_parameter
    ( handle => p_handle
    , name   => 'PARTITION_OPTIONS'
    , value  => 'MERGE'
    );
  end add_staging_filters;

begin
  if '30' is not null
  then
    l_max_time_import := 30;
  end if;

  select default_tablespace
  into   l_table_ts
  from   dba_users
  where  username = l_object_owner
  ;
  l_handle := dbms_datapump.open
              ( operation => 'IMPORT'
              , job_mode  => 'SCHEMA'
              );
  dbms_datapump.add_file
  ( handle    => l_handle
  , filename  => lower(l_filename||'.dmp')
  , directory => l_directory_name
  , filetype  => DBMS_DATAPUMP.KU$_FILE_TYPE_DUMP_FILE
  );
  dbms_datapump.add_file
  ( handle    => l_handle
  , filename  => lower(l_filename||'.log')
  , directory => l_directory_name
  , filetype  => DBMS_DATAPUMP.KU$_FILE_TYPE_LOG_FILE
  );
  dbms_datapump.metadata_remap
  ( handle      => l_handle
  , name        => 'REMAP_TABLESPACE'
  , old_value   => 'OHI_TAB'
  , value       => l_table_ts
  , object_type => 'TABLE'
  );
  dbms_datapump.metadata_remap
  ( handle      => l_handle
  , name        => 'REMAP_TABLESPACE'
  , old_value   => 'OHI_TAB'
  , value       => l_table_ts
  , object_type => 'CONSTRAINT'
  );
  dbms_datapump.metadata_remap
  ( handle    => l_handle
  , name      => 'REMAP_TABLESPACE'
  , old_value => 'OHI_TAB'
  , value     => l_index_ts
  , object_type => 'INDEX'
  );
  dbms_datapump.metadata_remap
  ( handle    => l_handle
  , name      => 'REMAP_SCHEMA'
  , old_value => 'OHI_'||l_application_name||'_OWNER'
  , value     => l_object_owner
  );

  l_action := 'Schema list';
  dbms_datapump.metadata_filter
  ( handle => l_handle
  , name   => 'SCHEMA_LIST'
  , value  => '''OHI_'||l_application_name||'_OWNER'''
  );

  l_action := 'Quota filter';
  dbms_datapump.metadata_filter
  ( handle => l_handle
  , name   => 'EXCLUDE_PATH_EXPR'
  , value  => 'in (''SCHEMA_EXPORT/TABLESPACE_QUOTA'')'
  );

  l_action := 'Table databasechangelog exists, so append data';
  dbms_datapump.set_parameter
  ( handle      => l_handle
  , name        => 'TABLE_EXISTS_ACTION'
  , value       => 'APPEND'
  );

  /*
   * for staging, exclude indexes, constraints, etc
   */
  if l_staging
  then
    add_staging_filters(l_handle);
  end if;

  l_action := 'Start';
  dbms_datapump.start_job
  ( handle    => l_handle
  );

  l_start_datetime := sysdate;
  while sysdate < l_start_datetime + l_max_time_import / (60 * 24)
  loop
    declare
      e_no_such_job exception;
      pragma exception_init (e_no_such_job, -31626);
    begin
      dbms_datapump.get_status
      ( handle    => l_handle
      , mask      => 8
      , timeout   => 0
      , job_state => l_job_state
      , status    => l_status
      );
      if l_job_state in ('STOPPED', 'COMPLETED')
      then
        return;
      elsif l_job_state = 'COMPLETING'
      then
        -- bit of a hack: this status can be sticky. Assume that 10 seconds will be enough to complete
        dbms_lock.sleep(10);
        return;
      end if;
      dbms_lock.sleep(2);
    exception
      when e_no_such_job
      then
        -- Job no longer present
        return;
    end;
  end loop;
  raise_application_error(-20001, 'Timeout occurred. Job state is '||l_job_state);
/* Exception handler only useful when run from sqlplus, not from main installer
exception
  when others
  then
    dbms_output.put_line('Error in step '||l_action);

    dbms_datapump.get_status
    ( handle    => l_handle
    , mask      => 8
    , job_state => l_job_state
    , status    => l_status
    );

    l_error_table := l_status.error;
    l_error_index := l_error_table.FIRST;

    while l_error_index is not null
    loop
      dbms_output.put_line(l_error_table(l_error_index).LogText);
      l_error_index := l_error_table.NEXT(l_error_index);
    end loop;

    raise;
*/
end;: ORA-39001: invalid argument value
ORA-06512: at "SYS.DBMS_SYS_ERROR", line 79
ORA-06512: at "SYS.DBMS_DATAPUMP", line 4087
ORA-06512: at "SYS.DBMS_DATAPUMP", line 4338
ORA-06512: at line 96

liquibase.exception.DatabaseException: Error executing SQL declare
  l_application_name varchar2(50) := 'CLAIMS';
  l_directory_name   varchar2(30) := 'OHI_DPDUMP_DIR';
  l_filename         varchar2(30) := lower(l_application_name||'_fresh_install');
  l_object_owner     varchar2(30) := upper('OHI_CLAIMS_OWNER');
  l_table_ts         varchar2(30);
  l_index_ts         varchar2(30) := upper('OHI_TAB');
  l_staging          boolean := (upper('false') = 'TRUE');

  l_handle           number;
  l_job_state        varchar2(100);
  l_status           ku$_status;
  l_error_table      ku$_logentry;
  l_error_index      pls_integer;
  l_action           varchar2(100);
  l_start_datetime   date;
  l_max_time_import  number := 30;

  procedure add_staging_filters
  ( p_handle in number
  ) is
    /*
     * Staging owners only contain plain tables, no indexes, constraints, etc
     */
  begin

    -- Don't include data
    dbms_datapump.data_filter
    ( handle => p_handle
    , name   => 'INCLUDE_ROWS'
    , value  => 0
    );
    dbms_datapump.metadata_filter
    ( handle      => p_handle
    , name        => 'EXCLUDE_PATH_EXPR'
    , value       => 'in (''STATISTICS'', ''TYPE'', ''DEFAULT_ROLE'', ''ROLE_GRANT'', ''SYSTEM_GRANT'''
                      ||', ''GRANT'', ''INDEX'', ''CONSTRAINT'', ''VIEW'', ''PACKAGE'', ''FUNCTION'''
                      ||', ''SEQUENCE'', ''SYNONYM'', ''TABLESPACE_QUOTA'', ''PROCACT_SCHEMA'', ''PROCOBJ'')'
    );
    dbms_datapump.metadata_filter
    ( handle      => p_handle
    , name        => 'NAME_EXPR'
    , value       => 'NOT IN (''DATABASECHANGELOG'', ''DATABASECHANGELOGLOCK'')'
    , object_type => 'TABLE'
    );
    dbms_datapump.metadata_filter
    ( handle      => p_handle
    , name        => 'NAME_EXPR'
    , value       => 'NOT LIKE ''OHI_TASK%'''
    , object_type => 'TABLE'
    );
    dbms_datapump.metadata_filter
    ( handle      => p_handle
    , name        => 'NAME_EXPR'
    , value       => 'NOT LIKE ''BATCH%'''
    , object_type => 'TABLE'
    );
    dbms_datapump.metadata_filter
    ( handle      => p_handle
    , name        => 'NAME_EXPR'
    , value       => 'NOT LIKE ''FIN_FIN_TRANS_SET_PERIODS'''
    , object_type => 'TABLE'
    );
    dbms_datapump.metadata_filter
    ( handle      => p_handle
    , name        => 'NAME_EXPR'
    , value       => 'NOT IN (''ACT$ACTIVITY_BUCKETS'', ''ACT$ACTIVITY_TYPE_VIEWS'', ''DAT$IMPORT_DATA'', ''FIN$CANCEL_WORK_AREA'''
                           ||', ''FIN$FINANCIAL_MESSAGE'', ''FIN$FIN_MESS_CHUNK'', ''FIN$SELECTED_FIN_TRANSACTION'', ''MEP$MEPE_DESELECT_CANDIDATES'''
                           ||', ''MEP$PRESELECTED_MEMBERPERIODS'', ''OHI$CFG_MIGR_MARSHALLED_ITEMS'', ''OHI$DATA_SET_PROCESS_FAILURES'''
                           ||', ''OHI$EXCLUDE_OPTIONS'', ''OHI$INSTALL_LOG'', ''OHI$SEARCH_RESULTS'', ''OHI$SEED_DATA_SETS'''
                           ||', ''OHI$SYSTEM_EVENT_LOGS'', ''OHI$UI_COMPONENT_CHANGES'')'
    , object_type => 'TABLE'
    );
    dbms_datapump.set_parameter
    ( handle => p_handle
    , name   => 'PARTITION_OPTIONS'
    , value  => 'MERGE'
    );
  end add_staging_filters;

begin
  if '30' is not null
  then
    l_max_time_import := 30;
  end if;

  select default_tablespace
  into   l_table_ts
  from   dba_users
  where  username = l_object_owner
  ;
  l_handle := dbms_datapump.open
              ( operation => 'IMPORT'
              , job_mode  => 'SCHEMA'
              );
  dbms_datapump.add_file
  ( handle    => l_handle
  , filename  => lower(l_filename||'.dmp')
  , directory => l_directory_name
  , filetype  => DBMS_DATAPUMP.KU$_FILE_TYPE_DUMP_FILE
  );
  dbms_datapump.add_file
  ( handle    => l_handle
  , filename  => lower(l_filename||'.log')
  , directory => l_directory_name
  , filetype  => DBMS_DATAPUMP.KU$_FILE_TYPE_LOG_FILE
  );
  dbms_datapump.metadata_remap
  ( handle      => l_handle
  , name        => 'REMAP_TABLESPACE'
  , old_value   => 'OHI_TAB'
  , value       => l_table_ts
  , object_type => 'TABLE'
  );
  dbms_datapump.metadata_remap
  ( handle      => l_handle
  , name        => 'REMAP_TABLESPACE'
  , old_value   => 'OHI_TAB'
  , value       => l_table_ts
  , object_type => 'CONSTRAINT'
  );
  dbms_datapump.metadata_remap
  ( handle    => l_handle
  , name      => 'REMAP_TABLESPACE'
  , old_value => 'OHI_TAB'
  , value     => l_index_ts
  , object_type => 'INDEX'
  );
  dbms_datapump.metadata_remap
  ( handle    => l_handle
  , name      => 'REMAP_SCHEMA'
  , old_value => 'OHI_'||l_application_name||'_OWNER'
  , value     => l_object_owner
  );

  l_action := 'Schema list';
  dbms_datapump.metadata_filter
  ( handle => l_handle
  , name   => 'SCHEMA_LIST'
  , value  => '''OHI_'||l_application_name||'_OWNER'''
  );

  l_action := 'Quota filter';
  dbms_datapump.metadata_filter
  ( handle => l_handle
  , name   => 'EXCLUDE_PATH_EXPR'
  , value  => 'in (''SCHEMA_EXPORT/TABLESPACE_QUOTA'')'
  );

  l_action := 'Table databasechangelog exists, so append data';
  dbms_datapump.set_parameter
  ( handle      => l_handle
  , name        => 'TABLE_EXISTS_ACTION'
  , value       => 'APPEND'
  );

  /*
   * for staging, exclude indexes, constraints, etc
   */
  if l_staging
  then
    add_staging_filters(l_handle);
  end if;

  l_action := 'Start';
  dbms_datapump.start_job
  ( handle    => l_handle
  );

  l_start_datetime := sysdate;
  while sysdate < l_start_datetime + l_max_time_import / (60 * 24)
  loop
    declare
      e_no_such_job exception;
      pragma exception_init (e_no_such_job, -31626);
    begin
      dbms_datapump.get_status
      ( handle    => l_handle
      , mask      => 8
      , timeout   => 0
      , job_state => l_job_state
      , status    => l_status
      );
      if l_job_state in ('STOPPED', 'COMPLETED')
      then
        return;
      elsif l_job_state = 'COMPLETING'
      then
        -- bit of a hack: this status can be sticky. Assume that 10 seconds will be enough to complete
        dbms_lock.sleep(10);
        return;
      end if;
      dbms_lock.sleep(2);
    exception
      when e_no_such_job
      then
        -- Job no longer present
        return;
    end;
  end loop;
  raise_application_error(-20001, 'Timeout occurred. Job state is '||l_job_state);
/* Exception handler only useful when run from sqlplus, not from main installer
exception
  when others
  then
    dbms_output.put_line('Error in step '||l_action);

    dbms_datapump.get_status
    ( handle    => l_handle
    , mask      => 8
    , job_state => l_job_state
    , status    => l_status
    );

    l_error_table := l_status.error;
    l_error_index := l_error_table.FIRST;

    while l_error_index is not null
    loop
      dbms_output.put_line(l_error_table(l_error_index).LogText);
      l_error_index := l_error_table.NEXT(l_error_index);
    end loop;

    raise;
*/
end;: ORA-39001: invalid argument value
ORA-06512: at "SYS.DBMS_SYS_ERROR", line 79
ORA-06512: at "SYS.DBMS_DATAPUMP", line 4087
ORA-06512: at "SYS.DBMS_DATAPUMP", line 4338
ORA-06512: at line 96

	at liquibase.executor.jvm.JdbcExecutor.execute(JdbcExecutor.java:62)
	at liquibase.executor.jvm.JdbcExecutor.execute(JdbcExecutor.java:104)
	at liquibase.database.AbstractDatabase.execute(AbstractDatabase.java:1091)
	at liquibase.database.AbstractDatabase.executeStatements(AbstractDatabase.java:1075)
	at liquibase.changelog.ChangeSet.execute(ChangeSet.java:317)
	at liquibase.changelog.visitor.UpdateVisitor.visit(UpdateVisitor.java:27)
	at liquibase.changelog.ChangeLogIterator.run(ChangeLogIterator.java:58)
	at liquibase.Liquibase.update(Liquibase.java:114)
	at liquibase.Liquibase$update$0.call(Unknown Source)
	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:116)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:128)
	at com.oracle.healthinsurance.install.Install$LiquibaseInvoker.update(Install.groovy:316)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)
	at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSite.invoke(PogoMetaMethodSite.java:167)
	at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.call(PogoMetaMethodSite.java:70)
	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:116)
	at com.oracle.healthinsurance.install.Install$_callLiquibase_closure1.doCall(Install.groovy:257)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:104)
	at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:326)
	at org.codehaus.groovy.runtime.metaclass.ClosureMetaClass.invokeMethod(ClosureMetaClass.java:264)
	at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1041)
	at groovy.lang.Closure.call(Closure.java:421)
	at groovy.lang.Closure.call(Closure.java:437)
	at org.codehaus.groovy.runtime.DefaultGroovyMethods.each(DefaultGroovyMethods.java:2295)
	at org.codehaus.groovy.runtime.DefaultGroovyMethods.each(DefaultGroovyMethods.java:2280)
	at org.codehaus.groovy.runtime.DefaultGroovyMethods.each(DefaultGroovyMethods.java:2321)
	at org.codehaus.groovy.runtime.dgm$185.invoke(Unknown Source)
	at org.codehaus.groovy.runtime.callsite.PojoMetaMethodSite$PojoMetaMethodSiteNoUnwrapNoCoerce.invoke(PojoMetaMethodSite.java:246)
	at org.codehaus.groovy.runtime.callsite.PojoMetaMethodSite.call(PojoMetaMethodSite.java:55)
	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:116)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:128)
	at com.oracle.healthinsurance.install.Install.callLiquibase(Install.groovy:254)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)
	at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:190)
	at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:58)
	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallCurrent(CallSiteArray.java:51)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:157)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:193)
	at com.oracle.healthinsurance.install.Install.performInstall(Install.groovy:111)
	at com.oracle.healthinsurance.install.Install$performInstall.call(Unknown Source)
	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:116)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:120)
	at com.oracle.healthinsurance.install.Install.main(Install.groovy:71)
Caused by: java.sql.SQLException: ORA-39001: invalid argument value
ORA-06512: at "SYS.DBMS_SYS_ERROR", line 79
ORA-06512: at "SYS.DBMS_DATAPUMP", line 4087
ORA-06512: at "SYS.DBMS_DATAPUMP", line 4338
ORA-06512: at line 96

	at oracle.jdbc.driver.T4CTTIoer11.processError(T4CTTIoer11.java:494)
	at oracle.jdbc.driver.T4CTTIoer11.processError(T4CTTIoer11.java:446)
	at oracle.jdbc.driver.T4C8Oall.processError(T4C8Oall.java:1054)
	at oracle.jdbc.driver.T4CTTIfun.receive(T4CTTIfun.java:623)
	at oracle.jdbc.driver.T4CTTIfun.doRPC(T4CTTIfun.java:252)
	at oracle.jdbc.driver.T4C8Oall.doOALL(T4C8Oall.java:612)
	at oracle.jdbc.driver.T4CStatement.doOall8(T4CStatement.java:213)
	at oracle.jdbc.driver.T4CStatement.doOall8(T4CStatement.java:37)
	at oracle.jdbc.driver.T4CStatement.executeForRows(T4CStatement.java:896)
	at oracle.jdbc.driver.OracleStatement.doExecuteWithTimeout(OracleStatement.java:1119)
	at oracle.jdbc.driver.OracleStatement.executeInternal(OracleStatement.java:1737)
	at oracle.jdbc.driver.OracleStatement.execute(OracleStatement.java:1692)
	at oracle.jdbc.driver.OracleStatementWrapper.execute(OracleStatementWrapper.java:300)
	at liquibase.executor.jvm.JdbcExecutor$1ExecuteStatementCallback.doInStatement(JdbcExecutor.java:92)
	at liquibase.executor.jvm.JdbcExecutor.execute(JdbcExecutor.java:55)
	... 58 more
Caused by: Error : 39001, Position : 0, Sql = declare
  l_application_name varchar2(50) := 'CLAIMS';
  l_directory_name   varchar2(30) := 'OHI_DPDUMP_DIR';
  l_filename         varchar2(30) := lower(l_application_name||'_fresh_install');
  l_object_owner     varchar2(30) := upper('OHI_CLAIMS_OWNER');
  l_table_ts         varchar2(30);
  l_index_ts         varchar2(30) := upper('OHI_TAB');
  l_staging          boolean := (upper('false') = 'TRUE');

  l_handle           number;
  l_job_state        varchar2(100);
  l_status           ku$_status;
  l_error_table      ku$_logentry;
  l_error_index      pls_integer;
  l_action           varchar2(100);
  l_start_datetime   date;
  l_max_time_import  number := 30;

  procedure add_staging_filters
  ( p_handle in number
  ) is
    /*
     * Staging owners only contain plain tables, no indexes, constraints, etc
     */
  begin

    -- Don't include data
    dbms_datapump.data_filter
    ( handle => p_handle
    , name   => 'INCLUDE_ROWS'
    , value  => 0
    );
    dbms_datapump.metadata_filter
    ( handle      => p_handle
    , name        => 'EXCLUDE_PATH_EXPR'
    , value       => 'in (''STATISTICS'', ''TYPE'', ''DEFAULT_ROLE'', ''ROLE_GRANT'', ''SYSTEM_GRANT'''
                      ||', ''GRANT'', ''INDEX'', ''CONSTRAINT'', ''VIEW'', ''PACKAGE'', ''FUNCTION'''
                      ||', ''SEQUENCE'', ''SYNONYM'', ''TABLESPACE_QUOTA'', ''PROCACT_SCHEMA'', ''PROCOBJ'')'
    );
    dbms_datapump.metadata_filter
    ( handle      => p_handle
    , name        => 'NAME_EXPR'
    , value       => 'NOT IN (''DATABASECHANGELOG'', ''DATABASECHANGELOGLOCK'')'
    , object_type => 'TABLE'
    );
    dbms_datapump.metadata_filter
    ( handle      => p_handle
    , name        => 'NAME_EXPR'
    , value       => 'NOT LIKE ''OHI_TASK%'''
    , object_type => 'TABLE'
    );
    dbms_datapump.metadata_filter
    ( handle      => p_handle
    , name        => 'NAME_EXPR'
    , value       => 'NOT LIKE ''BATCH%'''
    , object_type => 'TABLE'
    );
    dbms_datapump.metadata_filter
    ( handle      => p_handle
    , name        => 'NAME_EXPR'
    , value       => 'NOT LIKE ''FIN_FIN_TRANS_SET_PERIODS'''
    , object_type => 'TABLE'
    );
    dbms_datapump.metadata_filter
    ( handle      => p_handle
    , name        => 'NAME_EXPR'
    , value       => 'NOT IN (''ACT$ACTIVITY_BUCKETS'', ''ACT$ACTIVITY_TYPE_VIEWS'', ''DAT$IMPORT_DATA'', ''FIN$CANCEL_WORK_AREA'''
                           ||', ''FIN$FINANCIAL_MESSAGE'', ''FIN$FIN_MESS_CHUNK'', ''FIN$SELECTED_FIN_TRANSACTION'', ''MEP$MEPE_DESELECT_CANDIDATES'''
                           ||', ''MEP$PRESELECTED_MEMBERPERIODS'', ''OHI$CFG_MIGR_MARSHALLED_ITEMS'', ''OHI$DATA_SET_PROCESS_FAILURES'''
                           ||', ''OHI$EXCLUDE_OPTIONS'', ''OHI$INSTALL_LOG'', ''OHI$SEARCH_RESULTS'', ''OHI$SEED_DATA_SETS'''
                           ||', ''OHI$SYSTEM_EVENT_LOGS'', ''OHI$UI_COMPONENT_CHANGES'')'
    , object_type => 'TABLE'
    );
    dbms_datapump.set_parameter
    ( handle => p_handle
    , name   => 'PARTITION_OPTIONS'
    , value  => 'MERGE'
    );
  end add_staging_filters;

begin
  if '30' is not null
  then
    l_max_time_import := 30;
  end if;

  select default_tablespace
  into   l_table_ts
  from   dba_users
  where  username = l_object_owner
  ;
  l_handle := dbms_datapump.open
              ( operation => 'IMPORT'
              , job_mode  => 'SCHEMA'
              );
  dbms_datapump.add_file
  ( handle    => l_handle
  , filename  => lower(l_filename||'.dmp')
  , directory => l_directory_name
  , filetype  => DBMS_DATAPUMP.KU$_FILE_TYPE_DUMP_FILE
  );
  dbms_datapump.add_file
  ( handle    => l_handle
  , filename  => lower(l_filename||'.log')
  , directory => l_directory_name
  , filetype  => DBMS_DATAPUMP.KU$_FILE_TYPE_LOG_FILE
  );
  dbms_datapump.metadata_remap
  ( handle      => l_handle
  , name        => 'REMAP_TABLESPACE'
  , old_value   => 'OHI_TAB'
  , value       => l_table_ts
  , object_type => 'TABLE'
  );
  dbms_datapump.metadata_remap
  ( handle      => l_handle
  , name        => 'REMAP_TABLESPACE'
  , old_value   => 'OHI_TAB'
  , value       => l_table_ts
  , object_type => 'CONSTRAINT'
  );
  dbms_datapump.metadata_remap
  ( handle    => l_handle
  , name      => 'REMAP_TABLESPACE'
  , old_value => 'OHI_TAB'
  , value     => l_index_ts
  , object_type => 'INDEX'
  );
  dbms_datapump.metadata_remap
  ( handle    => l_handle
  , name      => 'REMAP_SCHEMA'
  , old_value => 'OHI_'||l_application_name||'_OWNER'
  , value     => l_object_owner
  );

  l_action := 'Schema list';
  dbms_datapump.metadata_filter
  ( handle => l_handle
  , name   => 'SCHEMA_LIST'
  , value  => '''OHI_'||l_application_name||'_OWNER'''
  );

  l_action := 'Quota filter';
  dbms_datapump.metadata_filter
  ( handle => l_handle
  , name   => 'EXCLUDE_PATH_EXPR'
  , value  => 'in (''SCHEMA_EXPORT/TABLESPACE_QUOTA'')'
  );

  l_action := 'Table databasechangelog exists, so append data';
  dbms_datapump.set_parameter
  ( handle      => l_handle
  , name        => 'TABLE_EXISTS_ACTION'
  , value       => 'APPEND'
  );

  /*
   * for staging, exclude indexes, constraints, etc
   */
  if l_staging
  then
    add_staging_filters(l_handle);
  end if;

  l_action := 'Start';
  dbms_datapump.start_job
  ( handle    => l_handle
  );

  l_start_datetime := sysdate;
  while sysdate < l_start_datetime + l_max_time_import / (60 * 24)
  loop
    declare
      e_no_such_job exception;
      pragma exception_init (e_no_such_job, -31626);
    begin
      dbms_datapump.get_status
      ( handle    => l_handle
      , mask      => 8
      , timeout   => 0
      , job_state => l_job_state
      , status    => l_status
      );
      if l_job_state in ('STOPPED', 'COMPLETED')
      then
        return;
      elsif l_job_state = 'COMPLETING'
      then
        -- bit of a hack: this status can be sticky. Assume that 10 seconds will be enough to complete
        dbms_lock.sleep(10);
        return;
      end if;
      dbms_lock.sleep(2);
    exception
      when e_no_such_job
      then
        -- Job no longer present
        return;
    end;
  end loop;
  raise_application_error(-20001, 'Timeout occurred. Job state is '||l_job_state);
/* Exception handler only useful when run from sqlplus, not from main installer
exception
  when others
  then
    dbms_output.put_line('Error in step '||l_action);

    dbms_datapump.get_status
    ( handle    => l_handle
    , mask      => 8
    , job_state => l_job_state
    , status    => l_status
    );

    l_error_table := l_status.error;
    l_error_index := l_error_table.FIRST;

    while l_error_index is not null
    loop
      dbms_output.put_line(l_error_table(l_error_index).LogText);
      l_error_index := l_error_table.NEXT(l_error_index);
    end loop;

    raise;
*/
end;, OriginalSql = declare
  l_application_name varchar2(50) := 'CLAIMS';
  l_directory_name   varchar2(30) := 'OHI_DPDUMP_DIR';
  l_filename         varchar2(30) := lower(l_application_name||'_fresh_install');
  l_object_owner     varchar2(30) := upper('OHI_CLAIMS_OWNER');
  l_table_ts         varchar2(30);
  l_index_ts         varchar2(30) := upper('OHI_TAB');
  l_staging          boolean := (upper('false') = 'TRUE');

  l_handle           number;
  l_job_state        varchar2(100);
  l_status           ku$_status;
  l_error_table      ku$_logentry;
  l_error_index      pls_integer;
  l_action           varchar2(100);
  l_start_datetime   date;
  l_max_time_import  number := 30;

  procedure add_staging_filters
  ( p_handle in number
  ) is
    /*
     * Staging owners only contain plain tables, no indexes, constraints, etc
     */
  begin

    -- Don't include data
    dbms_datapump.data_filter
    ( handle => p_handle
    , name   => 'INCLUDE_ROWS'
    , value  => 0
    );
    dbms_datapump.metadata_filter
    ( handle      => p_handle
    , name        => 'EXCLUDE_PATH_EXPR'
    , value       => 'in (''STATISTICS'', ''TYPE'', ''DEFAULT_ROLE'', ''ROLE_GRANT'', ''SYSTEM_GRANT'''
                      ||', ''GRANT'', ''INDEX'', ''CONSTRAINT'', ''VIEW'', ''PACKAGE'', ''FUNCTION'''
                      ||', ''SEQUENCE'', ''SYNONYM'', ''TABLESPACE_QUOTA'', ''PROCACT_SCHEMA'', ''PROCOBJ'')'
    );
    dbms_datapump.metadata_filter
    ( handle      => p_handle
    , name        => 'NAME_EXPR'
    , value       => 'NOT IN (''DATABASECHANGELOG'', ''DATABASECHANGELOGLOCK'')'
    , object_type => 'TABLE'
    );
    dbms_datapump.metadata_filter
    ( handle      => p_handle
    , name        => 'NAME_EXPR'
    , value       => 'NOT LIKE ''OHI_TASK%'''
    , object_type => 'TABLE'
    );
    dbms_datapump.metadata_filter
    ( handle      => p_handle
    , name        => 'NAME_EXPR'
    , value       => 'NOT LIKE ''BATCH%'''
    , object_type => 'TABLE'
    );
    dbms_datapump.metadata_filter
    ( handle      => p_handle
    , name        => 'NAME_EXPR'
    , value       => 'NOT LIKE ''FIN_FIN_TRANS_SET_PERIODS'''
    , object_type => 'TABLE'
    );
    dbms_datapump.metadata_filter
    ( handle      => p_handle
    , name        => 'NAME_EXPR'
    , value       => 'NOT IN (''ACT$ACTIVITY_BUCKETS'', ''ACT$ACTIVITY_TYPE_VIEWS'', ''DAT$IMPORT_DATA'', ''FIN$CANCEL_WORK_AREA'''
                           ||', ''FIN$FINANCIAL_MESSAGE'', ''FIN$FIN_MESS_CHUNK'', ''FIN$SELECTED_FIN_TRANSACTION'', ''MEP$MEPE_DESELECT_CANDIDATES'''
                           ||', ''MEP$PRESELECTED_MEMBERPERIODS'', ''OHI$CFG_MIGR_MARSHALLED_ITEMS'', ''OHI$DATA_SET_PROCESS_FAILURES'''
                           ||', ''OHI$EXCLUDE_OPTIONS'', ''OHI$INSTALL_LOG'', ''OHI$SEARCH_RESULTS'', ''OHI$SEED_DATA_SETS'''
                           ||', ''OHI$SYSTEM_EVENT_LOGS'', ''OHI$UI_COMPONENT_CHANGES'')'
    , object_type => 'TABLE'
    );
    dbms_datapump.set_parameter
    ( handle => p_handle
    , name   => 'PARTITION_OPTIONS'
    , value  => 'MERGE'
    );
  end add_staging_filters;

begin
  if '30' is not null
  then
    l_max_time_import := 30;
  end if;

  select default_tablespace
  into   l_table_ts
  from   dba_users
  where  username = l_object_owner
  ;
  l_handle := dbms_datapump.open
              ( operation => 'IMPORT'
              , job_mode  => 'SCHEMA'
              );
  dbms_datapump.add_file
  ( handle    => l_handle
  , filename  => lower(l_filename||'.dmp')
  , directory => l_directory_name
  , filetype  => DBMS_DATAPUMP.KU$_FILE_TYPE_DUMP_FILE
  );
  dbms_datapump.add_file
  ( handle    => l_handle
  , filename  => lower(l_filename||'.log')
  , directory => l_directory_name
  , filetype  => DBMS_DATAPUMP.KU$_FILE_TYPE_LOG_FILE
  );
  dbms_datapump.metadata_remap
  ( handle      => l_handle
  , name        => 'REMAP_TABLESPACE'
  , old_value   => 'OHI_TAB'
  , value       => l_table_ts
  , object_type => 'TABLE'
  );
  dbms_datapump.metadata_remap
  ( handle      => l_handle
  , name        => 'REMAP_TABLESPACE'
  , old_value   => 'OHI_TAB'
  , value       => l_table_ts
  , object_type => 'CONSTRAINT'
  );
  dbms_datapump.metadata_remap
  ( handle    => l_handle
  , name      => 'REMAP_TABLESPACE'
  , old_value => 'OHI_TAB'
  , value     => l_index_ts
  , object_type => 'INDEX'
  );
  dbms_datapump.metadata_remap
  ( handle    => l_handle
  , name      => 'REMAP_SCHEMA'
  , old_value => 'OHI_'||l_application_name||'_OWNER'
  , value     => l_object_owner
  );

  l_action := 'Schema list';
  dbms_datapump.metadata_filter
  ( handle => l_handle
  , name   => 'SCHEMA_LIST'
  , value  => '''OHI_'||l_application_name||'_OWNER'''
  );

  l_action := 'Quota filter';
  dbms_datapump.metadata_filter
  ( handle => l_handle
  , name   => 'EXCLUDE_PATH_EXPR'
  , value  => 'in (''SCHEMA_EXPORT/TABLESPACE_QUOTA'')'
  );

  l_action := 'Table databasechangelog exists, so append data';
  dbms_datapump.set_parameter
  ( handle      => l_handle
  , name        => 'TABLE_EXISTS_ACTION'
  , value       => 'APPEND'
  );

  /*
   * for staging, exclude indexes, constraints, etc
   */
  if l_staging
  then
    add_staging_filters(l_handle);
  end if;

  l_action := 'Start';
  dbms_datapump.start_job
  ( handle    => l_handle
  );

  l_start_datetime := sysdate;
  while sysdate < l_start_datetime + l_max_time_import / (60 * 24)
  loop
    declare
      e_no_such_job exception;
      pragma exception_init (e_no_such_job, -31626);
    begin
      dbms_datapump.get_status
      ( handle    => l_handle
      , mask      => 8
      , timeout   => 0
      , job_state => l_job_state
      , status    => l_status
      );
      if l_job_state in ('STOPPED', 'COMPLETED')
      then
        return;
      elsif l_job_state = 'COMPLETING'
      then
        -- bit of a hack: this status can be sticky. Assume that 10 seconds will be enough to complete
        dbms_lock.sleep(10);
        return;
      end if;
      dbms_lock.sleep(2);
    exception
      when e_no_such_job
      then
        -- Job no longer present
        return;
    end;
  end loop;
  raise_application_error(-20001, 'Timeout occurred. Job state is '||l_job_state);
/* Exception handler only useful when run from sqlplus, not from main installer
exception
  when others
  then
    dbms_output.put_line('Error in step '||l_action);

    dbms_datapump.get_status
    ( handle    => l_handle
    , mask      => 8
    , job_state => l_job_state
    , status    => l_status
    );

    l_error_table := l_status.error;
    l_error_index := l_error_table.FIRST;

    while l_error_index is not null
    loop
      dbms_output.put_line(l_error_table(l_error_index).LogText);
      l_error_index := l_error_table.NEXT(l_error_index);
    end loop;

    raise;
*/
end;, Error Msg = ORA-39001: invalid argument value
ORA-06512: at "SYS.DBMS_SYS_ERROR", line 79
ORA-06512: at "SYS.DBMS_DATAPUMP", line 4087
ORA-06512: at "SYS.DBMS_DATAPUMP", line 4338
ORA-06512: at line 96

	at oracle.jdbc.driver.T4CTTIoer11.processError(T4CTTIoer11.java:498)
	... 72 more
SEVERE 4/5/19 3:13 PM:liquibase: Liquibase Update Failed: %s
liquibase.exception.MigrationFailedException: Migration failed for change set import_fresh_install.xml::1::ftollena:
     Reason: liquibase.exception.DatabaseException: Error executing SQL declare
  l_application_name varchar2(50) := 'CLAIMS';
  l_directory_name   varchar2(30) := 'OHI_DPDUMP_DIR';
  l_filename         varchar2(30) := lower(l_application_name||'_fresh_install');
  l_object_owner     varchar2(30) := upper('OHI_CLAIMS_OWNER');
  l_table_ts         varchar2(30);
  l_index_ts         varchar2(30) := upper('OHI_TAB');
  l_staging          boolean := (upper('false') = 'TRUE');

  l_handle           number;
  l_job_state        varchar2(100);
  l_status           ku$_status;
  l_error_table      ku$_logentry;
  l_error_index      pls_integer;
  l_action           varchar2(100);
  l_start_datetime   date;
  l_max_time_import  number := 30;

  procedure add_staging_filters
  ( p_handle in number
  ) is
    /*
     * Staging owners only contain plain tables, no indexes, constraints, etc
     */
  begin

    -- Don't include data
    dbms_datapump.data_filter
    ( handle => p_handle
    , name   => 'INCLUDE_ROWS'
    , value  => 0
    );
    dbms_datapump.metadata_filter
    ( handle      => p_handle
    , name        => 'EXCLUDE_PATH_EXPR'
    , value       => 'in (''STATISTICS'', ''TYPE'', ''DEFAULT_ROLE'', ''ROLE_GRANT'', ''SYSTEM_GRANT'''
                      ||', ''GRANT'', ''INDEX'', ''CONSTRAINT'', ''VIEW'', ''PACKAGE'', ''FUNCTION'''
                      ||', ''SEQUENCE'', ''SYNONYM'', ''TABLESPACE_QUOTA'', ''PROCACT_SCHEMA'', ''PROCOBJ'')'
    );
    dbms_datapump.metadata_filter
    ( handle      => p_handle
    , name        => 'NAME_EXPR'
    , value       => 'NOT IN (''DATABASECHANGELOG'', ''DATABASECHANGELOGLOCK'')'
    , object_type => 'TABLE'
    );
    dbms_datapump.metadata_filter
    ( handle      => p_handle
    , name        => 'NAME_EXPR'
    , value       => 'NOT LIKE ''OHI_TASK%'''
    , object_type => 'TABLE'
    );
    dbms_datapump.metadata_filter
    ( handle      => p_handle
    , name        => 'NAME_EXPR'
    , value       => 'NOT LIKE ''BATCH%'''
    , object_type => 'TABLE'
    );
    dbms_datapump.metadata_filter
    ( handle      => p_handle
    , name        => 'NAME_EXPR'
    , value       => 'NOT LIKE ''FIN_FIN_TRANS_SET_PERIODS'''
    , object_type => 'TABLE'
    );
    dbms_datapump.metadata_filter
    ( handle      => p_handle
    , name        => 'NAME_EXPR'
    , value       => 'NOT IN (''ACT$ACTIVITY_BUCKETS'', ''ACT$ACTIVITY_TYPE_VIEWS'', ''DAT$IMPORT_DATA'', ''FIN$CANCEL_WORK_AREA'''
                           ||', ''FIN$FINANCIAL_MESSAGE'', ''FIN$FIN_MESS_CHUNK'', ''FIN$SELECTED_FIN_TRANSACTION'', ''MEP$MEPE_DESELECT_CANDIDATES'''
                           ||', ''MEP$PRESELECTED_MEMBERPERIODS'', ''OHI$CFG_MIGR_MARSHALLED_ITEMS'', ''OHI$DATA_SET_PROCESS_FAILURES'''
                           ||', ''OHI$EXCLUDE_OPTIONS'', ''OHI$INSTALL_LOG'', ''OHI$SEARCH_RESULTS'', ''OHI$SEED_DATA_SETS'''
                           ||', ''OHI$SYSTEM_EVENT_LOGS'', ''OHI$UI_COMPONENT_CHANGES'')'
    , object_type => 'TABLE'
    );
    dbms_datapump.set_parameter
    ( handle => p_handle
    , name   => 'PARTITION_OPTIONS'
    , value  => 'MERGE'
    );
  end add_staging_filters;

begin
  if '30' is not null
  then
    l_max_time_import := 30;
  end if;

  select default_tablespace
  into   l_table_ts
  from   dba_users
  where  username = l_object_owner
  ;
  l_handle := dbms_datapump.open
              ( operation => 'IMPORT'
              , job_mode  => 'SCHEMA'
              );
  dbms_datapump.add_file
  ( handle    => l_handle
  , filename  => lower(l_filename||'.dmp')
  , directory => l_directory_name
  , filetype  => DBMS_DATAPUMP.KU$_FILE_TYPE_DUMP_FILE
  );
  dbms_datapump.add_file
  ( handle    => l_handle
  , filename  => lower(l_filename||'.log')
  , directory => l_directory_name
  , filetype  => DBMS_DATAPUMP.KU$_FILE_TYPE_LOG_FILE
  );
  dbms_datapump.metadata_remap
  ( handle      => l_handle
  , name        => 'REMAP_TABLESPACE'
  , old_value   => 'OHI_TAB'
  , value       => l_table_ts
  , object_type => 'TABLE'
  );
  dbms_datapump.metadata_remap
  ( handle      => l_handle
  , name        => 'REMAP_TABLESPACE'
  , old_value   => 'OHI_TAB'
  , value       => l_table_ts
  , object_type => 'CONSTRAINT'
  );
  dbms_datapump.metadata_remap
  ( handle    => l_handle
  , name      => 'REMAP_TABLESPACE'
  , old_value => 'OHI_TAB'
  , value     => l_index_ts
  , object_type => 'INDEX'
  );
  dbms_datapump.metadata_remap
  ( handle    => l_handle
  , name      => 'REMAP_SCHEMA'
  , old_value => 'OHI_'||l_application_name||'_OWNER'
  , value     => l_object_owner
  );

  l_action := 'Schema list';
  dbms_datapump.metadata_filter
  ( handle => l_handle
  , name   => 'SCHEMA_LIST'
  , value  => '''OHI_'||l_application_name||'_OWNER'''
  );

  l_action := 'Quota filter';
  dbms_datapump.metadata_filter
  ( handle => l_handle
  , name   => 'EXCLUDE_PATH_EXPR'
  , value  => 'in (''SCHEMA_EXPORT/TABLESPACE_QUOTA'')'
  );

  l_action := 'Table databasechangelog exists, so append data';
  dbms_datapump.set_parameter
  ( handle      => l_handle
  , name        => 'TABLE_EXISTS_ACTION'
  , value       => 'APPEND'
  );

  /*
   * for staging, exclude indexes, constraints, etc
   */
  if l_staging
  then
    add_staging_filters(l_handle);
  end if;

  l_action := 'Start';
  dbms_datapump.start_job
  ( handle    => l_handle
  );

  l_start_datetime := sysdate;
  while sysdate < l_start_datetime + l_max_time_import / (60 * 24)
  loop
    declare
      e_no_such_job exception;
      pragma exception_init (e_no_such_job, -31626);
    begin
      dbms_datapump.get_status
      ( handle    => l_handle
      , mask      => 8
      , timeout   => 0
      , job_state => l_job_state
      , status    => l_status
      );
      if l_job_state in ('STOPPED', 'COMPLETED')
      then
        return;
      elsif l_job_state = 'COMPLETING'
      then
        -- bit of a hack: this status can be sticky. Assume that 10 seconds will be enough to complete
        dbms_lock.sleep(10);
        return;
      end if;
      dbms_lock.sleep(2);
    exception
      when e_no_such_job
      then
        -- Job no longer present
        return;
    end;
  end loop;
  raise_application_error(-20001, 'Timeout occurred. Job state is '||l_job_state);
/* Exception handler only useful when run from sqlplus, not from main installer
exception
  when others
  then
    dbms_output.put_line('Error in step '||l_action);

    dbms_datapump.get_status
    ( handle    => l_handle
    , mask      => 8
    , job_state => l_job_state
    , status    => l_status
    );

    l_error_table := l_status.error;
    l_error_index := l_error_table.FIRST;

    while l_error_index is not null
    loop
      dbms_output.put_line(l_error_table(l_error_index).LogText);
      l_error_index := l_error_table.NEXT(l_error_index);
    end loop;

    raise;
*/
end;: ORA-39001: invalid argument value
ORA-06512: at "SYS.DBMS_SYS_ERROR", line 79
ORA-06512: at "SYS.DBMS_DATAPUMP", line 4087
ORA-06512: at "SYS.DBMS_DATAPUMP", line 4338
ORA-06512: at line 96
:
          Caused By: Error executing SQL declare
  l_application_name varchar2(50) := 'CLAIMS';
  l_directory_name   varchar2(30) := 'OHI_DPDUMP_DIR';
  l_filename         varchar2(30) := lower(l_application_name||'_fresh_install');
  l_object_owner     varchar2(30) := upper('OHI_CLAIMS_OWNER');
  l_table_ts         varchar2(30);
  l_index_ts         varchar2(30) := upper('OHI_TAB');
  l_staging          boolean := (upper('false') = 'TRUE');

  l_handle           number;
  l_job_state        varchar2(100);
  l_status           ku$_status;
  l_error_table      ku$_logentry;
  l_error_index      pls_integer;
  l_action           varchar2(100);
  l_start_datetime   date;
  l_max_time_import  number := 30;

  procedure add_staging_filters
  ( p_handle in number
  ) is
    /*
     * Staging owners only contain plain tables, no indexes, constraints, etc
     */
  begin

    -- Don't include data
    dbms_datapump.data_filter
    ( handle => p_handle
    , name   => 'INCLUDE_ROWS'
    , value  => 0
    );
    dbms_datapump.metadata_filter
    ( handle      => p_handle
    , name        => 'EXCLUDE_PATH_EXPR'
    , value       => 'in (''STATISTICS'', ''TYPE'', ''DEFAULT_ROLE'', ''ROLE_GRANT'', ''SYSTEM_GRANT'''
                      ||', ''GRANT'', ''INDEX'', ''CONSTRAINT'', ''VIEW'', ''PACKAGE'', ''FUNCTION'''
                      ||', ''SEQUENCE'', ''SYNONYM'', ''TABLESPACE_QUOTA'', ''PROCACT_SCHEMA'', ''PROCOBJ'')'
    );
    dbms_datapump.metadata_filter
    ( handle      => p_handle
    , name        => 'NAME_EXPR'
    , value       => 'NOT IN (''DATABASECHANGELOG'', ''DATABASECHANGELOGLOCK'')'
    , object_type => 'TABLE'
    );
    dbms_datapump.metadata_filter
    ( handle      => p_handle
    , name        => 'NAME_EXPR'
    , value       => 'NOT LIKE ''OHI_TASK%'''
    , object_type => 'TABLE'
    );
    dbms_datapump.metadata_filter
    ( handle      => p_handle
    , name        => 'NAME_EXPR'
    , value       => 'NOT LIKE ''BATCH%'''
    , object_type => 'TABLE'
    );
    dbms_datapump.metadata_filter
    ( handle      => p_handle
    , name        => 'NAME_EXPR'
    , value       => 'NOT LIKE ''FIN_FIN_TRANS_SET_PERIODS'''
    , object_type => 'TABLE'
    );
    dbms_datapump.metadata_filter
    ( handle      => p_handle
    , name        => 'NAME_EXPR'
    , value       => 'NOT IN (''ACT$ACTIVITY_BUCKETS'', ''ACT$ACTIVITY_TYPE_VIEWS'', ''DAT$IMPORT_DATA'', ''FIN$CANCEL_WORK_AREA'''
                           ||', ''FIN$FINANCIAL_MESSAGE'', ''FIN$FIN_MESS_CHUNK'', ''FIN$SELECTED_FIN_TRANSACTION'', ''MEP$MEPE_DESELECT_CANDIDATES'''
                           ||', ''MEP$PRESELECTED_MEMBERPERIODS'', ''OHI$CFG_MIGR_MARSHALLED_ITEMS'', ''OHI$DATA_SET_PROCESS_FAILURES'''
                           ||', ''OHI$EXCLUDE_OPTIONS'', ''OHI$INSTALL_LOG'', ''OHI$SEARCH_RESULTS'', ''OHI$SEED_DATA_SETS'''
                           ||', ''OHI$SYSTEM_EVENT_LOGS'', ''OHI$UI_COMPONENT_CHANGES'')'
    , object_type => 'TABLE'
    );
    dbms_datapump.set_parameter
    ( handle => p_handle
    , name   => 'PARTITION_OPTIONS'
    , value  => 'MERGE'
    );
  end add_staging_filters;

begin
  if '30' is not null
  then
    l_max_time_import := 30;
  end if;

  select default_tablespace
  into   l_table_ts
  from   dba_users
  where  username = l_object_owner
  ;
  l_handle := dbms_datapump.open
              ( operation => 'IMPORT'
              , job_mode  => 'SCHEMA'
              );
  dbms_datapump.add_file
  ( handle    => l_handle
  , filename  => lower(l_filename||'.dmp')
  , directory => l_directory_name
  , filetype  => DBMS_DATAPUMP.KU$_FILE_TYPE_DUMP_FILE
  );
  dbms_datapump.add_file
  ( handle    => l_handle
  , filename  => lower(l_filename||'.log')
  , directory => l_directory_name
  , filetype  => DBMS_DATAPUMP.KU$_FILE_TYPE_LOG_FILE
  );
  dbms_datapump.metadata_remap
  ( handle      => l_handle
  , name        => 'REMAP_TABLESPACE'
  , old_value   => 'OHI_TAB'
  , value       => l_table_ts
  , object_type => 'TABLE'
  );
  dbms_datapump.metadata_remap
  ( handle      => l_handle
  , name        => 'REMAP_TABLESPACE'
  , old_value   => 'OHI_TAB'
  , value       => l_table_ts
  , object_type => 'CONSTRAINT'
  );
  dbms_datapump.metadata_remap
  ( handle    => l_handle
  , name      => 'REMAP_TABLESPACE'
  , old_value => 'OHI_TAB'
  , value     => l_index_ts
  , object_type => 'INDEX'
  );
  dbms_datapump.metadata_remap
  ( handle    => l_handle
  , name      => 'REMAP_SCHEMA'
  , old_value => 'OHI_'||l_application_name||'_OWNER'
  , value     => l_object_owner
  );

  l_action := 'Schema list';
  dbms_datapump.metadata_filter
  ( handle => l_handle
  , name   => 'SCHEMA_LIST'
  , value  => '''OHI_'||l_application_name||'_OWNER'''
  );

  l_action := 'Quota filter';
  dbms_datapump.metadata_filter
  ( handle => l_handle
  , name   => 'EXCLUDE_PATH_EXPR'
  , value  => 'in (''SCHEMA_EXPORT/TABLESPACE_QUOTA'')'
  );

  l_action := 'Table databasechangelog exists, so append data';
  dbms_datapump.set_parameter
  ( handle      => l_handle
  , name        => 'TABLE_EXISTS_ACTION'
  , value       => 'APPEND'
  );

  /*
   * for staging, exclude indexes, constraints, etc
   */
  if l_staging
  then
    add_staging_filters(l_handle);
  end if;

  l_action := 'Start';
  dbms_datapump.start_job
  ( handle    => l_handle
  );

  l_start_datetime := sysdate;
  while sysdate < l_start_datetime + l_max_time_import / (60 * 24)
  loop
    declare
      e_no_such_job exception;
      pragma exception_init (e_no_such_job, -31626);
    begin
      dbms_datapump.get_status
      ( handle    => l_handle
      , mask      => 8
      , timeout   => 0
      , job_state => l_job_state
      , status    => l_status
      );
      if l_job_state in ('STOPPED', 'COMPLETED')
      then
        return;
      elsif l_job_state = 'COMPLETING'
      then
        -- bit of a hack: this status can be sticky. Assume that 10 seconds will be enough to complete
        dbms_lock.sleep(10);
        return;
      end if;
      dbms_lock.sleep(2);
    exception
      when e_no_such_job
      then
        -- Job no longer present
        return;
    end;
  end loop;
  raise_application_error(-20001, 'Timeout occurred. Job state is '||l_job_state);
/* Exception handler only useful when run from sqlplus, not from main installer
exception
  when others
  then
    dbms_output.put_line('Error in step '||l_action);

    dbms_datapump.get_status
    ( handle    => l_handle
    , mask      => 8
    , job_state => l_job_state
    , status    => l_status
    );

    l_error_table := l_status.error;
    l_error_index := l_error_table.FIRST;

    while l_error_index is not null
    loop
      dbms_output.put_line(l_error_table(l_error_index).LogText);
      l_error_index := l_error_table.NEXT(l_error_index);
    end loop;

    raise;
*/
end;: ORA-39001: invalid argument value
ORA-06512: at "SYS.DBMS_SYS_ERROR", line 79
ORA-06512: at "SYS.DBMS_DATAPUMP", line 4087
ORA-06512: at "SYS.DBMS_DATAPUMP", line 4338
ORA-06512: at line 96
:
          Caused By: ORA-39001: invalid argument value
ORA-06512: at "SYS.DBMS_SYS_ERROR", line 79
ORA-06512: at "SYS.DBMS_DATAPUMP", line 4087
ORA-06512: at "SYS.DBMS_DATAPUMP", line 4338
ORA-06512: at line 96
:
          Caused By: ORA-39001: invalid argument value
ORA-06512: at "SYS.DBMS_SYS_ERROR", line 79
ORA-06512: at "SYS.DBMS_DATAPUMP", line 4087
ORA-06512: at "SYS.DBMS_DATAPUMP", line 4338
ORA-06512: at line 96

	at liquibase.changelog.ChangeSet.execute(ChangeSet.java:347)
	at liquibase.changelog.visitor.UpdateVisitor.visit(UpdateVisitor.java:27)
	at liquibase.changelog.ChangeLogIterator.run(ChangeLogIterator.java:58)
	at liquibase.Liquibase.update(Liquibase.java:114)
	at liquibase.Liquibase$update$0.call(Unknown Source)
	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:116)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:128)
	at com.oracle.healthinsurance.install.Install$LiquibaseInvoker.update(Install.groovy:316)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)
	at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSite.invoke(PogoMetaMethodSite.java:167)
	at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.call(PogoMetaMethodSite.java:70)
	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:116)
	at com.oracle.healthinsurance.install.Install$_callLiquibase_closure1.doCall(Install.groovy:257)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:104)
	at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:326)
	at org.codehaus.groovy.runtime.metaclass.ClosureMetaClass.invokeMethod(ClosureMetaClass.java:264)
	at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1041)
	at groovy.lang.Closure.call(Closure.java:421)
	at groovy.lang.Closure.call(Closure.java:437)
	at org.codehaus.groovy.runtime.DefaultGroovyMethods.each(DefaultGroovyMethods.java:2295)
	at org.codehaus.groovy.runtime.DefaultGroovyMethods.each(DefaultGroovyMethods.java:2280)
	at org.codehaus.groovy.runtime.DefaultGroovyMethods.each(DefaultGroovyMethods.java:2321)
	at org.codehaus.groovy.runtime.dgm$185.invoke(Unknown Source)
	at org.codehaus.groovy.runtime.callsite.PojoMetaMethodSite$PojoMetaMethodSiteNoUnwrapNoCoerce.invoke(PojoMetaMethodSite.java:246)
	at org.codehaus.groovy.runtime.callsite.PojoMetaMethodSite.call(PojoMetaMethodSite.java:55)
	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:116)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:128)
	at com.oracle.healthinsurance.install.Install.callLiquibase(Install.groovy:254)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)
	at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:190)
	at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:58)
	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallCurrent(CallSiteArray.java:51)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:157)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:193)
	at com.oracle.healthinsurance.install.Install.performInstall(Install.groovy:111)
	at com.oracle.healthinsurance.install.Install$performInstall.call(Unknown Source)
	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:116)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:120)
	at com.oracle.healthinsurance.install.Install.main(Install.groovy:71)
Caused by: liquibase.exception.DatabaseException: Error executing SQL declare
  l_application_name varchar2(50) := 'CLAIMS';
  l_directory_name   varchar2(30) := 'OHI_DPDUMP_DIR';
  l_filename         varchar2(30) := lower(l_application_name||'_fresh_install');
  l_object_owner     varchar2(30) := upper('OHI_CLAIMS_OWNER');
  l_table_ts         varchar2(30);
  l_index_ts         varchar2(30) := upper('OHI_TAB');
  l_staging          boolean := (upper('false') = 'TRUE');

  l_handle           number;
  l_job_state        varchar2(100);
  l_status           ku$_status;
  l_error_table      ku$_logentry;
  l_error_index      pls_integer;
  l_action           varchar2(100);
  l_start_datetime   date;
  l_max_time_import  number := 30;

  procedure add_staging_filters
  ( p_handle in number
  ) is
    /*
     * Staging owners only contain plain tables, no indexes, constraints, etc
     */
  begin

    -- Don't include data
    dbms_datapump.data_filter
    ( handle => p_handle
    , name   => 'INCLUDE_ROWS'
    , value  => 0
    );
    dbms_datapump.metadata_filter
    ( handle      => p_handle
    , name        => 'EXCLUDE_PATH_EXPR'
    , value       => 'in (''STATISTICS'', ''TYPE'', ''DEFAULT_ROLE'', ''ROLE_GRANT'', ''SYSTEM_GRANT'''
                      ||', ''GRANT'', ''INDEX'', ''CONSTRAINT'', ''VIEW'', ''PACKAGE'', ''FUNCTION'''
                      ||', ''SEQUENCE'', ''SYNONYM'', ''TABLESPACE_QUOTA'', ''PROCACT_SCHEMA'', ''PROCOBJ'')'
    );
    dbms_datapump.metadata_filter
    ( handle      => p_handle
    , name        => 'NAME_EXPR'
    , value       => 'NOT IN (''DATABASECHANGELOG'', ''DATABASECHANGELOGLOCK'')'
    , object_type => 'TABLE'
    );
    dbms_datapump.metadata_filter
    ( handle      => p_handle
    , name        => 'NAME_EXPR'
    , value       => 'NOT LIKE ''OHI_TASK%'''
    , object_type => 'TABLE'
    );
    dbms_datapump.metadata_filter
    ( handle      => p_handle
    , name        => 'NAME_EXPR'
    , value       => 'NOT LIKE ''BATCH%'''
    , object_type => 'TABLE'
    );
    dbms_datapump.metadata_filter
    ( handle      => p_handle
    , name        => 'NAME_EXPR'
    , value       => 'NOT LIKE ''FIN_FIN_TRANS_SET_PERIODS'''
    , object_type => 'TABLE'
    );
    dbms_datapump.metadata_filter
    ( handle      => p_handle
    , name        => 'NAME_EXPR'
    , value       => 'NOT IN (''ACT$ACTIVITY_BUCKETS'', ''ACT$ACTIVITY_TYPE_VIEWS'', ''DAT$IMPORT_DATA'', ''FIN$CANCEL_WORK_AREA'''
                           ||', ''FIN$FINANCIAL_MESSAGE'', ''FIN$FIN_MESS_CHUNK'', ''FIN$SELECTED_FIN_TRANSACTION'', ''MEP$MEPE_DESELECT_CANDIDATES'''
                           ||', ''MEP$PRESELECTED_MEMBERPERIODS'', ''OHI$CFG_MIGR_MARSHALLED_ITEMS'', ''OHI$DATA_SET_PROCESS_FAILURES'''
                           ||', ''OHI$EXCLUDE_OPTIONS'', ''OHI$INSTALL_LOG'', ''OHI$SEARCH_RESULTS'', ''OHI$SEED_DATA_SETS'''
                           ||', ''OHI$SYSTEM_EVENT_LOGS'', ''OHI$UI_COMPONENT_CHANGES'')'
    , object_type => 'TABLE'
    );
    dbms_datapump.set_parameter
    ( handle => p_handle
    , name   => 'PARTITION_OPTIONS'
    , value  => 'MERGE'
    );
  end add_staging_filters;

begin
  if '30' is not null
  then
    l_max_time_import := 30;
  end if;

  select default_tablespace
  into   l_table_ts
  from   dba_users
  where  username = l_object_owner
  ;
  l_handle := dbms_datapump.open
              ( operation => 'IMPORT'
              , job_mode  => 'SCHEMA'
              );
  dbms_datapump.add_file
  ( handle    => l_handle
  , filename  => lower(l_filename||'.dmp')
  , directory => l_directory_name
  , filetype  => DBMS_DATAPUMP.KU$_FILE_TYPE_DUMP_FILE
  );
  dbms_datapump.add_file
  ( handle    => l_handle
  , filename  => lower(l_filename||'.log')
  , directory => l_directory_name
  , filetype  => DBMS_DATAPUMP.KU$_FILE_TYPE_LOG_FILE
  );
  dbms_datapump.metadata_remap
  ( handle      => l_handle
  , name        => 'REMAP_TABLESPACE'
  , old_value   => 'OHI_TAB'
  , value       => l_table_ts
  , object_type => 'TABLE'
  );
  dbms_datapump.metadata_remap
  ( handle      => l_handle
  , name        => 'REMAP_TABLESPACE'
  , old_value   => 'OHI_TAB'
  , value       => l_table_ts
  , object_type => 'CONSTRAINT'
  );
  dbms_datapump.metadata_remap
  ( handle    => l_handle
  , name      => 'REMAP_TABLESPACE'
  , old_value => 'OHI_TAB'
  , value     => l_index_ts
  , object_type => 'INDEX'
  );
  dbms_datapump.metadata_remap
  ( handle    => l_handle
  , name      => 'REMAP_SCHEMA'
  , old_value => 'OHI_'||l_application_name||'_OWNER'
  , value     => l_object_owner
  );

  l_action := 'Schema list';
  dbms_datapump.metadata_filter
  ( handle => l_handle
  , name   => 'SCHEMA_LIST'
  , value  => '''OHI_'||l_application_name||'_OWNER'''
  );

  l_action := 'Quota filter';
  dbms_datapump.metadata_filter
  ( handle => l_handle
  , name   => 'EXCLUDE_PATH_EXPR'
  , value  => 'in (''SCHEMA_EXPORT/TABLESPACE_QUOTA'')'
  );

  l_action := 'Table databasechangelog exists, so append data';
  dbms_datapump.set_parameter
  ( handle      => l_handle
  , name        => 'TABLE_EXISTS_ACTION'
  , value       => 'APPEND'
  );

  /*
   * for staging, exclude indexes, constraints, etc
   */
  if l_staging
  then
    add_staging_filters(l_handle);
  end if;

  l_action := 'Start';
  dbms_datapump.start_job
  ( handle    => l_handle
  );

  l_start_datetime := sysdate;
  while sysdate < l_start_datetime + l_max_time_import / (60 * 24)
  loop
    declare
      e_no_such_job exception;
      pragma exception_init (e_no_such_job, -31626);
    begin
      dbms_datapump.get_status
      ( handle    => l_handle
      , mask      => 8
      , timeout   => 0
      , job_state => l_job_state
      , status    => l_status
      );
      if l_job_state in ('STOPPED', 'COMPLETED')
      then
        return;
      elsif l_job_state = 'COMPLETING'
      then
        -- bit of a hack: this status can be sticky. Assume that 10 seconds will be enough to complete
        dbms_lock.sleep(10);
        return;
      end if;
      dbms_lock.sleep(2);
    exception
      when e_no_such_job
      then
        -- Job no longer present
        return;
    end;
  end loop;
  raise_application_error(-20001, 'Timeout occurred. Job state is '||l_job_state);
/* Exception handler only useful when run from sqlplus, not from main installer
exception
  when others
  then
    dbms_output.put_line('Error in step '||l_action);

    dbms_datapump.get_status
    ( handle    => l_handle
    , mask      => 8
    , job_state => l_job_state
    , status    => l_status
    );

    l_error_table := l_status.error;
    l_error_index := l_error_table.FIRST;

    while l_error_index is not null
    loop
      dbms_output.put_line(l_error_table(l_error_index).LogText);
      l_error_index := l_error_table.NEXT(l_error_index);
    end loop;

    raise;
*/
end;: ORA-39001: invalid argument value
ORA-06512: at "SYS.DBMS_SYS_ERROR", line 79
ORA-06512: at "SYS.DBMS_DATAPUMP", line 4087
ORA-06512: at "SYS.DBMS_DATAPUMP", line 4338
ORA-06512: at line 96

	at liquibase.executor.jvm.JdbcExecutor.execute(JdbcExecutor.java:62)
	at liquibase.executor.jvm.JdbcExecutor.execute(JdbcExecutor.java:104)
	at liquibase.database.AbstractDatabase.execute(AbstractDatabase.java:1091)
	at liquibase.database.AbstractDatabase.executeStatements(AbstractDatabase.java:1075)
	at liquibase.changelog.ChangeSet.execute(ChangeSet.java:317)
	... 54 more
Caused by: java.sql.SQLException: ORA-39001: invalid argument value
ORA-06512: at "SYS.DBMS_SYS_ERROR", line 79
ORA-06512: at "SYS.DBMS_DATAPUMP", line 4087
ORA-06512: at "SYS.DBMS_DATAPUMP", line 4338
ORA-06512: at line 96

	at oracle.jdbc.driver.T4CTTIoer11.processError(T4CTTIoer11.java:494)
	at oracle.jdbc.driver.T4CTTIoer11.processError(T4CTTIoer11.java:446)
	at oracle.jdbc.driver.T4C8Oall.processError(T4C8Oall.java:1054)
	at oracle.jdbc.driver.T4CTTIfun.receive(T4CTTIfun.java:623)
	at oracle.jdbc.driver.T4CTTIfun.doRPC(T4CTTIfun.java:252)
	at oracle.jdbc.driver.T4C8Oall.doOALL(T4C8Oall.java:612)
	at oracle.jdbc.driver.T4CStatement.doOall8(T4CStatement.java:213)
	at oracle.jdbc.driver.T4CStatement.doOall8(T4CStatement.java:37)
	at oracle.jdbc.driver.T4CStatement.executeForRows(T4CStatement.java:896)
	at oracle.jdbc.driver.OracleStatement.doExecuteWithTimeout(OracleStatement.java:1119)
	at oracle.jdbc.driver.OracleStatement.executeInternal(OracleStatement.java:1737)
	at oracle.jdbc.driver.OracleStatement.execute(OracleStatement.java:1692)
	at oracle.jdbc.driver.OracleStatementWrapper.execute(OracleStatementWrapper.java:300)
	at liquibase.executor.jvm.JdbcExecutor$1ExecuteStatementCallback.doInStatement(JdbcExecutor.java:92)
	at liquibase.executor.jvm.JdbcExecutor.execute(JdbcExecutor.java:55)
	... 58 more
Caused by: Error : 39001, Position : 0, Sql = declare
  l_application_name varchar2(50) := 'CLAIMS';
  l_directory_name   varchar2(30) := 'OHI_DPDUMP_DIR';
  l_filename         varchar2(30) := lower(l_application_name||'_fresh_install');
  l_object_owner     varchar2(30) := upper('OHI_CLAIMS_OWNER');
  l_table_ts         varchar2(30);
  l_index_ts         varchar2(30) := upper('OHI_TAB');
  l_staging          boolean := (upper('false') = 'TRUE');

  l_handle           number;
  l_job_state        varchar2(100);
  l_status           ku$_status;
  l_error_table      ku$_logentry;
  l_error_index      pls_integer;
  l_action           varchar2(100);
  l_start_datetime   date;
  l_max_time_import  number := 30;

  procedure add_staging_filters
  ( p_handle in number
  ) is
    /*
     * Staging owners only contain plain tables, no indexes, constraints, etc
     */
  begin

    -- Don't include data
    dbms_datapump.data_filter
    ( handle => p_handle
    , name   => 'INCLUDE_ROWS'
    , value  => 0
    );
    dbms_datapump.metadata_filter
    ( handle      => p_handle
    , name        => 'EXCLUDE_PATH_EXPR'
    , value       => 'in (''STATISTICS'', ''TYPE'', ''DEFAULT_ROLE'', ''ROLE_GRANT'', ''SYSTEM_GRANT'''
                      ||', ''GRANT'', ''INDEX'', ''CONSTRAINT'', ''VIEW'', ''PACKAGE'', ''FUNCTION'''
                      ||', ''SEQUENCE'', ''SYNONYM'', ''TABLESPACE_QUOTA'', ''PROCACT_SCHEMA'', ''PROCOBJ'')'
    );
    dbms_datapump.metadata_filter
    ( handle      => p_handle
    , name        => 'NAME_EXPR'
    , value       => 'NOT IN (''DATABASECHANGELOG'', ''DATABASECHANGELOGLOCK'')'
    , object_type => 'TABLE'
    );
    dbms_datapump.metadata_filter
    ( handle      => p_handle
    , name        => 'NAME_EXPR'
    , value       => 'NOT LIKE ''OHI_TASK%'''
    , object_type => 'TABLE'
    );
    dbms_datapump.metadata_filter
    ( handle      => p_handle
    , name        => 'NAME_EXPR'
    , value       => 'NOT LIKE ''BATCH%'''
    , object_type => 'TABLE'
    );
    dbms_datapump.metadata_filter
    ( handle      => p_handle
    , name        => 'NAME_EXPR'
    , value       => 'NOT LIKE ''FIN_FIN_TRANS_SET_PERIODS'''
    , object_type => 'TABLE'
    );
    dbms_datapump.metadata_filter
    ( handle      => p_handle
    , name        => 'NAME_EXPR'
    , value       => 'NOT IN (''ACT$ACTIVITY_BUCKETS'', ''ACT$ACTIVITY_TYPE_VIEWS'', ''DAT$IMPORT_DATA'', ''FIN$CANCEL_WORK_AREA'''
                           ||', ''FIN$FINANCIAL_MESSAGE'', ''FIN$FIN_MESS_CHUNK'', ''FIN$SELECTED_FIN_TRANSACTION'', ''MEP$MEPE_DESELECT_CANDIDATES'''
                           ||', ''MEP$PRESELECTED_MEMBERPERIODS'', ''OHI$CFG_MIGR_MARSHALLED_ITEMS'', ''OHI$DATA_SET_PROCESS_FAILURES'''
                           ||', ''OHI$EXCLUDE_OPTIONS'', ''OHI$INSTALL_LOG'', ''OHI$SEARCH_RESULTS'', ''OHI$SEED_DATA_SETS'''
                           ||', ''OHI$SYSTEM_EVENT_LOGS'', ''OHI$UI_COMPONENT_CHANGES'')'
    , object_type => 'TABLE'
    );
    dbms_datapump.set_parameter
    ( handle => p_handle
    , name   => 'PARTITION_OPTIONS'
    , value  => 'MERGE'
    );
  end add_staging_filters;

begin
  if '30' is not null
  then
    l_max_time_import := 30;
  end if;

  select default_tablespace
  into   l_table_ts
  from   dba_users
  where  username = l_object_owner
  ;
  l_handle := dbms_datapump.open
              ( operation => 'IMPORT'
              , job_mode  => 'SCHEMA'
              );
  dbms_datapump.add_file
  ( handle    => l_handle
  , filename  => lower(l_filename||'.dmp')
  , directory => l_directory_name
  , filetype  => DBMS_DATAPUMP.KU$_FILE_TYPE_DUMP_FILE
  );
  dbms_datapump.add_file
  ( handle    => l_handle
  , filename  => lower(l_filename||'.log')
  , directory => l_directory_name
  , filetype  => DBMS_DATAPUMP.KU$_FILE_TYPE_LOG_FILE
  );
  dbms_datapump.metadata_remap
  ( handle      => l_handle
  , name        => 'REMAP_TABLESPACE'
  , old_value   => 'OHI_TAB'
  , value       => l_table_ts
  , object_type => 'TABLE'
  );
  dbms_datapump.metadata_remap
  ( handle      => l_handle
  , name        => 'REMAP_TABLESPACE'
  , old_value   => 'OHI_TAB'
  , value       => l_table_ts
  , object_type => 'CONSTRAINT'
  );
  dbms_datapump.metadata_remap
  ( handle    => l_handle
  , name      => 'REMAP_TABLESPACE'
  , old_value => 'OHI_TAB'
  , value     => l_index_ts
  , object_type => 'INDEX'
  );
  dbms_datapump.metadata_remap
  ( handle    => l_handle
  , name      => 'REMAP_SCHEMA'
  , old_value => 'OHI_'||l_application_name||'_OWNER'
  , value     => l_object_owner
  );

  l_action := 'Schema list';
  dbms_datapump.metadata_filter
  ( handle => l_handle
  , name   => 'SCHEMA_LIST'
  , value  => '''OHI_'||l_application_name||'_OWNER'''
  );

  l_action := 'Quota filter';
  dbms_datapump.metadata_filter
  ( handle => l_handle
  , name   => 'EXCLUDE_PATH_EXPR'
  , value  => 'in (''SCHEMA_EXPORT/TABLESPACE_QUOTA'')'
  );

  l_action := 'Table databasechangelog exists, so append data';
  dbms_datapump.set_parameter
  ( handle      => l_handle
  , name        => 'TABLE_EXISTS_ACTION'
  , value       => 'APPEND'
  );

  /*
   * for staging, exclude indexes, constraints, etc
   */
  if l_staging
  then
    add_staging_filters(l_handle);
  end if;

  l_action := 'Start';
  dbms_datapump.start_job
  ( handle    => l_handle
  );

  l_start_datetime := sysdate;
  while sysdate < l_start_datetime + l_max_time_import / (60 * 24)
  loop
    declare
      e_no_such_job exception;
      pragma exception_init (e_no_such_job, -31626);
    begin
      dbms_datapump.get_status
      ( handle    => l_handle
      , mask      => 8
      , timeout   => 0
      , job_state => l_job_state
      , status    => l_status
      );
      if l_job_state in ('STOPPED', 'COMPLETED')
      then
        return;
      elsif l_job_state = 'COMPLETING'
      then
        -- bit of a hack: this status can be sticky. Assume that 10 seconds will be enough to complete
        dbms_lock.sleep(10);
        return;
      end if;
      dbms_lock.sleep(2);
    exception
      when e_no_such_job
      then
        -- Job no longer present
        return;
    end;
  end loop;
  raise_application_error(-20001, 'Timeout occurred. Job state is '||l_job_state);
/* Exception handler only useful when run from sqlplus, not from main installer
exception
  when others
  then
    dbms_output.put_line('Error in step '||l_action);

    dbms_datapump.get_status
    ( handle    => l_handle
    , mask      => 8
    , job_state => l_job_state
    , status    => l_status
    );

    l_error_table := l_status.error;
    l_error_index := l_error_table.FIRST;

    while l_error_index is not null
    loop
      dbms_output.put_line(l_error_table(l_error_index).LogText);
      l_error_index := l_error_table.NEXT(l_error_index);
    end loop;

    raise;
*/
end;, OriginalSql = declare
  l_application_name varchar2(50) := 'CLAIMS';
  l_directory_name   varchar2(30) := 'OHI_DPDUMP_DIR';
  l_filename         varchar2(30) := lower(l_application_name||'_fresh_install');
  l_object_owner     varchar2(30) := upper('OHI_CLAIMS_OWNER');
  l_table_ts         varchar2(30);
  l_index_ts         varchar2(30) := upper('OHI_TAB');
  l_staging          boolean := (upper('false') = 'TRUE');

  l_handle           number;
  l_job_state        varchar2(100);
  l_status           ku$_status;
  l_error_table      ku$_logentry;
  l_error_index      pls_integer;
  l_action           varchar2(100);
  l_start_datetime   date;
  l_max_time_import  number := 30;

  procedure add_staging_filters
  ( p_handle in number
  ) is
    /*
     * Staging owners only contain plain tables, no indexes, constraints, etc
     */
  begin

    -- Don't include data
    dbms_datapump.data_filter
    ( handle => p_handle
    , name   => 'INCLUDE_ROWS'
    , value  => 0
    );
    dbms_datapump.metadata_filter
    ( handle      => p_handle
    , name        => 'EXCLUDE_PATH_EXPR'
    , value       => 'in (''STATISTICS'', ''TYPE'', ''DEFAULT_ROLE'', ''ROLE_GRANT'', ''SYSTEM_GRANT'''
                      ||', ''GRANT'', ''INDEX'', ''CONSTRAINT'', ''VIEW'', ''PACKAGE'', ''FUNCTION'''
                      ||', ''SEQUENCE'', ''SYNONYM'', ''TABLESPACE_QUOTA'', ''PROCACT_SCHEMA'', ''PROCOBJ'')'
    );
    dbms_datapump.metadata_filter
    ( handle      => p_handle
    , name        => 'NAME_EXPR'
    , value       => 'NOT IN (''DATABASECHANGELOG'', ''DATABASECHANGELOGLOCK'')'
    , object_type => 'TABLE'
    );
    dbms_datapump.metadata_filter
    ( handle      => p_handle
    , name        => 'NAME_EXPR'
    , value       => 'NOT LIKE ''OHI_TASK%'''
    , object_type => 'TABLE'
    );
    dbms_datapump.metadata_filter
    ( handle      => p_handle
    , name        => 'NAME_EXPR'
    , value       => 'NOT LIKE ''BATCH%'''
    , object_type => 'TABLE'
    );
    dbms_datapump.metadata_filter
    ( handle      => p_handle
    , name        => 'NAME_EXPR'
    , value       => 'NOT LIKE ''FIN_FIN_TRANS_SET_PERIODS'''
    , object_type => 'TABLE'
    );
    dbms_datapump.metadata_filter
    ( handle      => p_handle
    , name        => 'NAME_EXPR'
    , value       => 'NOT IN (''ACT$ACTIVITY_BUCKETS'', ''ACT$ACTIVITY_TYPE_VIEWS'', ''DAT$IMPORT_DATA'', ''FIN$CANCEL_WORK_AREA'''
                           ||', ''FIN$FINANCIAL_MESSAGE'', ''FIN$FIN_MESS_CHUNK'', ''FIN$SELECTED_FIN_TRANSACTION'', ''MEP$MEPE_DESELECT_CANDIDATES'''
                           ||', ''MEP$PRESELECTED_MEMBERPERIODS'', ''OHI$CFG_MIGR_MARSHALLED_ITEMS'', ''OHI$DATA_SET_PROCESS_FAILURES'''
                           ||', ''OHI$EXCLUDE_OPTIONS'', ''OHI$INSTALL_LOG'', ''OHI$SEARCH_RESULTS'', ''OHI$SEED_DATA_SETS'''
                           ||', ''OHI$SYSTEM_EVENT_LOGS'', ''OHI$UI_COMPONENT_CHANGES'')'
    , object_type => 'TABLE'
    );
    dbms_datapump.set_parameter
    ( handle => p_handle
    , name   => 'PARTITION_OPTIONS'
    , value  => 'MERGE'
    );
  end add_staging_filters;

begin
  if '30' is not null
  then
    l_max_time_import := 30;
  end if;

  select default_tablespace
  into   l_table_ts
  from   dba_users
  where  username = l_object_owner
  ;
  l_handle := dbms_datapump.open
              ( operation => 'IMPORT'
              , job_mode  => 'SCHEMA'
              );
  dbms_datapump.add_file
  ( handle    => l_handle
  , filename  => lower(l_filename||'.dmp')
  , directory => l_directory_name
  , filetype  => DBMS_DATAPUMP.KU$_FILE_TYPE_DUMP_FILE
  );
  dbms_datapump.add_file
  ( handle    => l_handle
  , filename  => lower(l_filename||'.log')
  , directory => l_directory_name
  , filetype  => DBMS_DATAPUMP.KU$_FILE_TYPE_LOG_FILE
  );
  dbms_datapump.metadata_remap
  ( handle      => l_handle
  , name        => 'REMAP_TABLESPACE'
  , old_value   => 'OHI_TAB'
  , value       => l_table_ts
  , object_type => 'TABLE'
  );
  dbms_datapump.metadata_remap
  ( handle      => l_handle
  , name        => 'REMAP_TABLESPACE'
  , old_value   => 'OHI_TAB'
  , value       => l_table_ts
  , object_type => 'CONSTRAINT'
  );
  dbms_datapump.metadata_remap
  ( handle    => l_handle
  , name      => 'REMAP_TABLESPACE'
  , old_value => 'OHI_TAB'
  , value     => l_index_ts
  , object_type => 'INDEX'
  );
  dbms_datapump.metadata_remap
  ( handle    => l_handle
  , name      => 'REMAP_SCHEMA'
  , old_value => 'OHI_'||l_application_name||'_OWNER'
  , value     => l_object_owner
  );

  l_action := 'Schema list';
  dbms_datapump.metadata_filter
  ( handle => l_handle
  , name   => 'SCHEMA_LIST'
  , value  => '''OHI_'||l_application_name||'_OWNER'''
  );

  l_action := 'Quota filter';
  dbms_datapump.metadata_filter
  ( handle => l_handle
  , name   => 'EXCLUDE_PATH_EXPR'
  , value  => 'in (''SCHEMA_EXPORT/TABLESPACE_QUOTA'')'
  );

  l_action := 'Table databasechangelog exists, so append data';
  dbms_datapump.set_parameter
  ( handle      => l_handle
  , name        => 'TABLE_EXISTS_ACTION'
  , value       => 'APPEND'
  );

  /*
   * for staging, exclude indexes, constraints, etc
   */
  if l_staging
  then
    add_staging_filters(l_handle);
  end if;

  l_action := 'Start';
  dbms_datapump.start_job
  ( handle    => l_handle
  );

  l_start_datetime := sysdate;
  while sysdate < l_start_datetime + l_max_time_import / (60 * 24)
  loop
    declare
      e_no_such_job exception;
      pragma exception_init (e_no_such_job, -31626);
    begin
      dbms_datapump.get_status
      ( handle    => l_handle
      , mask      => 8
      , timeout   => 0
      , job_state => l_job_state
      , status    => l_status
      );
      if l_job_state in ('STOPPED', 'COMPLETED')
      then
        return;
      elsif l_job_state = 'COMPLETING'
      then
        -- bit of a hack: this status can be sticky. Assume that 10 seconds will be enough to complete
        dbms_lock.sleep(10);
        return;
      end if;
      dbms_lock.sleep(2);
    exception
      when e_no_such_job
      then
        -- Job no longer present
        return;
    end;
  end loop;
  raise_application_error(-20001, 'Timeout occurred. Job state is '||l_job_state);
/* Exception handler only useful when run from sqlplus, not from main installer
exception
  when others
  then
    dbms_output.put_line('Error in step '||l_action);

    dbms_datapump.get_status
    ( handle    => l_handle
    , mask      => 8
    , job_state => l_job_state
    , status    => l_status
    );

    l_error_table := l_status.error;
    l_error_index := l_error_table.FIRST;

    while l_error_index is not null
    loop
      dbms_output.put_line(l_error_table(l_error_index).LogText);
      l_error_index := l_error_table.NEXT(l_error_index);
    end loop;

    raise;
*/
end;, Error Msg = ORA-39001: invalid argument value
ORA-06512: at "SYS.DBMS_SYS_ERROR", line 79
ORA-06512: at "SYS.DBMS_DATAPUMP", line 4087
ORA-06512: at "SYS.DBMS_DATAPUMP", line 4338
ORA-06512: at line 96

	at oracle.jdbc.driver.T4CTTIoer11.processError(T4CTTIoer11.java:498)
	... 72 more
